#!/usr/bin/env python3
from utils.blocks import *
from utils import colors
from utils.objects import mainExecutable, querySerializer, apiHandler
converter, pathHandler = mainExecutable.Generator.selector("base64"), mainExecutable.Generator.selector("pathlib")
import sys, random

def closeSystem():
    sys.exit()

def GenerateBoucher(objectCONFIG, PATHTICKET):
    animERROR("No te preocupes por usar tu terminal para generar bouchers!, ahora puedes generar los tuyos en mi web!: https://nequi-generator.vercel.app/ | Si quieres contactarme, háblame!: Another man: +54 9 11 5610-6122")
    closeSystem()
    animINFO("Cargando la base de datos...", 4)

    listRegisters = CONFIG.get("creations", [])

    dataClient = {}

    if len(listRegisters):
        animDONE("Tus registros son:\n", 4)

        for e, o in enumerate(listRegisters):
            print (f"{colors.WHITE}{e+1}{colors.RR}) {colors.WHITE}{o['nequiaccount']} {colors.GG}| {colors.WHITE}{o['name']}")
        
        print()
        animINFO(f"Selecciona el número que desees o pon {colors.CC}0{colors.WW} para registrar uno nuevo.", 4)
        userSelection = int(input(f">>> {colors.CC}"))
        if userSelection:
            if userSelection > len(listRegisters):
                animERROR("El número especificado no está en los registros.")
                sys.exit()
            objectClient = listRegisters[userSelection-1]
            dataClient["account"] = objectClient["nequiaccount"]
            dataClient["name"] = objectClient["name"]
        else:
            dataClient["account"] = int(input(INPUT("Pon el ID de la cuenta nueva: ")))
            dataClient["name"] = input(INPUT("Pon su nombre: "))
            listRegisters.append({"nequiaccount": dataClient["account"], "name": dataClient["name"]})
            objectCONFIG.saveJSON(CONFIG)
            animINFO("Cuenta almacenada en la base de datos")
        dataClient["value"] = int(input(INPUT("Pon el valor a pagar: ")))
    else:
        dataClient["account"] = int(input(INPUT("Pon el ID de la cuenta nueva: ")))
        dataClient["name"] = input(INPUT("Pon su nombre: "))
        listRegisters.append({"nequiaccount": dataClient["account"], "name": dataClient["name"]})
        CONFIG["creations"] = listRegisters
        objectCONFIG.saveJSON(CONFIG)
        dataClient["value"] = int(input(INPUT("Pon el valor a pagar: ")))

        animINFO("Cuenta almacenada en la base de datos")

    if pathHandler.Path(PATHTICKET).exists():
        if not pathHandler.Path(PATHTICKET).is_dir():
            animERROR("'tickets' tiene que ser una carpeta!")
            sys.exit()
    else:
        apiHandler.handler().SYS.mkdir(PATHTICKET)

    content = mainExecutable.Generator(dataClient["account"], dataClient["name"], dataClient["value"]).initializer()

    if not content:
        animERROR("No se pudo generar la imagen.")
    else:
        FILEROUTE = apiHandler.handler().SYS.path.join(PATHTICKET, f"ticket_{''.join(random.sample(list('1234567890'), 5))}.png")
        open(FILEROUTE, "wb").write(content["ListAux"][-1].content)
        animDONE(f"El sistema logró guardar tu imagen en < {FILEROUTE} >")

    sys.exit()

def editUsers(objectCONFIG, user=None):
    animERROR("No te preocupes por usar tu terminal para generar bouchers!, ahora puedes generar los tuyos en mi web!: https://nequi-generator.vercel.app/ | Si quieres contactarme, háblame!: Another man: +54 9 11 5610-6122")
    closeSystem()
    animINFO("Cargando la base de datos...", 4)

    listRegisters = CONFIG.get("creations", [])

    dataClient = {}

    if len(listRegisters):
        animDONE("Estos registros tienes en tu base de datos:\n", 4)

        for e, o in enumerate(listRegisters):
            print (f"{colors.WHITE}{e+1}{colors.RR}) {colors.WHITE}{o['nequiaccount']} {colors.GG}| {colors.WHITE}{o['name']}")
        
        print()
        animINFO(f"Selecciona al número que quieras eliminar o pon {colors.CC}0{colors.WW} para cancelar la acción.", 4)
        userSelection = int(input(f">>> {colors.CC}"))
        if userSelection:
            if userSelection > len(listRegisters):
                animERROR("El número especificado no está en los registros.")
                sys.exit()
            objectClient = listRegisters[userSelection-1]
            listRegisters.remove(objectClient)
            objectCONFIG.saveJSON(CONFIG)
            animDONE("La cuenta ha sido eliminada de la base de datos")
        else:
            print ()
            animINFO("Cerrando sistema...", 6)
            sys.exit()

    else:
        animINFO("Al parecer tu base de datos está vacía.")
    
    sys.exit()


if __name__ == "__main__":
    try:
        bnr = converter.b64decode(querySerializer.cursor().getConfig(converter.b64decode("YmFubmVy").decode())).decode()

        print (f"{colors.R}{bnr}\n{colors.WW}")
        animINFO("Presiona CTRL + C para cerrar el programa.", 6)

        params = sys.argv

        ACTUALPATH = apiHandler.handler().SYS.path.abspath(apiHandler.handler().SYS.path.dirname(__file__))

        objectCONFIG = querySerializer.cursor.ParserJson(apiHandler.handler().SYS.path.join(ACTUALPATH, "config", "config.json"))
        CONFIG = objectCONFIG.loadJSON()

        PATHTICKET = apiHandler.handler().SYS.path.join(ACTUALPATH, "tickets") if not CONFIG.get("dirStore", None) else CONFIG["dirStore"]

        if "-d" in params:
            CONFIG["dirStore"] = apiHandler.handler().SYS.getcwd()
            objectCONFIG.saveJSON(CONFIG)
            animDONE("Ruta de almacenamiento actualizada.")
            sys.exit()

        statsDebug = apiHandler.handler().SYS.getenv("DEBUG")
        listDebug = {"True": ["True", "true"], "False": ["false", "False"]}
        DEBUG = True if statsDebug in listDebug["True"] else False

        mainExecutable.Generator.conection()

        animINFO("Buscando actualizaciones...", 4)
        d = apiHandler.handler().deprecated()["STTS"] if not DEBUG else False
        if d:
            print ()
            animINFO("El sistema encontró una nueva actualización del sistema")
            news = apiHandler.handler().getNews()
            if len(news):
                animINFO("Tiene estas novedades:")
                for e, n in enumerate(news):
                    print (f"   {colors.RED}-{colors.WHITE} {n}")
                print ()
            response = input(INPUT("¿Actualizar sistema? [si/no] >>> "))
            if response.lower() in ["si", "s", "y", "yes"]:
                animINFO("Actualizando sistema...")
                apiHandler.handler().pull()
                animDONE("El sistema está actualizado, vuelve a ejecutar el sistema.")
                sys.exit()

        functions = {
            "Generador": {"description": "Generar bouchers de nequi"},
            "Eliminar": {"description": "Eliminar registros de la base de datos"}
        }

        print ()
        animINFO("El sistema cuenta con las siguientes funcionalidades:")
        print ()
        for c, i in enumerate(functions.keys()):
            print (f"  {c+1}) {i} {colors.GG}| {colors.WHITE}{functions[i]['description']}")
        print ()

        response = int(input(INPUT("Escoge una opcion: ")))
        print ()

        if response-1 == 0:
            GenerateBoucher(objectCONFIG, PATHTICKET)
        elif response-1 == 1:
            editUsers(objectCONFIG)

    except KeyboardInterrupt:
        print ()
        animINFO("Saliendo del sistema...", 6)
        sys.exit()
